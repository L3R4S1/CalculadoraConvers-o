/*
 * Autor: Israel Erlich
 * Data de Criação: 28/08/2024
 * Data de Conclusão:30/08/2024
 * 
 * Calculadora que realiza as seguintes conversões:
 * 1. Conversão de base 10 para base 2, 8, 16 e código BCD.
 * 2. Conversão de base 10 para complemento a 2 em 16 bits.
 * 3. Conversão de números reais para float e double, mostrando os bits de sinal, expoente e fração.
 * 
 * Revisões/Atualizações:
 * - 29/08/2024 14:00: Primeira versão completa com todas as funcionalidades implementadas.
 * - 30/08/2024 17:45: Adicionado cabeçalho com informações do autor e revisões.
 */

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

// Função para conversão de base 10 para outras bases (2, 8, 16)
void converte_base(int numero, int base) {
    int resto, i = 0;
    int resultado[32]; // Array para armazenar os restos da divisão (digitos na nova base)

    // Converte o número para a base desejada, armazenando os restos no array
    while (numero > 0) {
        resto = numero % base;
        resultado[i] = resto;
        numero /= base;
        i++;
    }

    // Imprime o número convertido na nova base
    printf("Número convertido para base %d: ", base);
    for (int j = i - 1; j >= 0; j--) {
        if (resultado[j] < 10)
            printf("%d", resultado[j]);
        else
            printf("%c", resultado[j] + 55); // Para bases maiores que 10 (A-F)
    }
    printf("\n");
}

// Função para conversão de base 10 para código BCD
void converte_para_bcd(int numero) {
    printf("Conversão para código BCD:\n");

    // Extrai cada dígito do número e converte para binário
    while (numero > 0) {
        int digito = numero % 10;
        printf("%d -> ", digito);
        for (int i = 3; i >= 0; i--) {
            printf("%d", (digito >> i) & 1); // Mostra o dígito em binário (4 bits)
        }
        printf("\n");
        numero /= 10;
    }
}

// Função para conversão de base 10 para complemento a 2 em 16 bits
void converte_para_complemento2(int numero) {
    int bits[16] = {0}; // Array para armazenar os bits (16 bits)
    int negativo = 0;

    if (numero < 0) {
        negativo = 1; // Marca o número como negativo
        numero = abs(numero); // Trabalha com o valor absoluto
    }

    // Converte o valor absoluto para binário
    for (int i = 15; i >= 0; i--) {
        bits[i] = numero % 2;
        numero /= 2;
    }

    // Imprime a representação binária em 16 bits
    printf("Representação binária (16 bits): ");
    for (int i = 0; i < 16; i++) {
        printf("%d", bits[i]);
    }
    printf("\n");

    // Se o número era negativo, calcula o complemento a 2
    if (negativo) {
        printf("Número é negativo, calculando complemento a 2:\n");

        // Inverte os bits
        for (int i = 0; i < 16; i++) {
            bits[i] = !bits[i];
        }

        // Soma 1 ao número invertido para obter o complemento a 2
        for (int i = 15; i >= 0; i--) {
            if (bits[i] == 0) {
                bits[i] = 1;
                break;
            } else {
                bits[i] = 0;
            }
        }

        // Imprime o complemento a 2 em 16 bits
        printf("Complemento a 2 (16 bits): ");
        for (int i = 0; i < 16; i++) {
            printf("%d", bits[i]);
        }
        printf("\n");
    }
}

// Função para mostrar os bits de um número float
void mostra_bits_float(float numero) {
    // União para manipular o número como float ou como uint32_t (inteiro de 32 bits)
    union {
        float f;
        uint32_t i;
    } converter;

    converter.f = numero; // Armazena o float na união

    // Exibe os bits de sinal, expoente e fração
    printf("Bits do float:\n");
    printf("Sinal: %d\n", (converter.i >> 31) & 1); // Bit de sinal (1 bit)
    printf("Expoente: ");
    for (int i = 30; i >= 23; i--) {
        printf("%d", (converter.i >> i) & 1); // Bits do expoente (8 bits)
    }
    printf("\nFração: ");
    for (int i = 22; i >= 0; i--) {
        printf("%d", (converter.i >> i) & 1); // Bits da fração (23 bits)
    }
    // Exibe o expoente com viés (bias subtraído)
    printf("\nExpoente com viés: %d\n", ((converter.i >> 23) & 0xFF) - 127);
}

// Função para mostrar os bits de um número double
void mostra_bits_double(double numero) {
    // União para manipular o número como double ou como uint64_t (inteiro de 64 bits)
    union {
        double d;
        uint64_t i;
    } converter;

    converter.d = numero; // Armazena o double na união

    // Exibe os bits de sinal, expoente e fração
    printf("Bits do double:\n");
    printf("Sinal: %d\n", (converter.i >> 63) & 1); // Bit de sinal (1 bit)
    printf("Expoente: ");
    for (int i = 62; i >= 52; i--) {
        printf("%d", (converter.i >> i) & 1); // Bits do expoente (11 bits)
    }
    printf("\nFração: ");
    for (int i = 51; i >= 0; i--) {
        printf("%d", (converter.i >> i) & 1); // Bits da fração (52 bits)
    }
    // Exibe o expoente com viés (bias subtraído)
    printf("\nExpoente com viés: %d\n", ((converter.i >> 52) & 0x7FF) - 1023);
}

int main() {
    int opcao;
    int numero;
    float numero_float;
    double numero_double;

    // Loop do menu de opções
    do {
        printf("\nEscolha uma opção:\n");
        printf("1 - Converter base 10 para outras bases (2, 8, 16)\n");
        printf("2 - Converter base 10 para código BCD\n");
        printf("3 - Converter base 10 para complemento a 2 (16 bits)\n");
        printf("4 - Converter número real para float (32 bits)\n");
        printf("5 - Converter número real para double (64 bits)\n");
        printf("0 - Sair\n");
        printf("Opção: ");
        scanf("%d", &opcao);

        // Processa a opção escolhida pelo usuário
        switch(opcao) {
            case 1:
                printf("Digite um número em base 10: ");
                scanf("%d", &numero);
                printf("\nBase 2:\n");
                converte_base(numero, 2);  // Converte para base 2
                printf("\nBase 8:\n");
                converte_base(numero, 8);  // Converte para base 8
                printf("\nBase 16:\n");
                converte_base(numero, 16); // Converte para base 16
                break;
            case 2:
                printf("Digite um número em base 10: ");
                scanf("%d", &numero);
                printf("\nCódigo BCD:\n");
                converte_para_bcd(numero); // Converte para código BCD
                break;
            case 3:
                printf("Digite um número em base 10 (com ou sem sinal): ");
                scanf("%d", &numero);
                printf("Convertendo para complemento a 2 em 16 bits:\n\n");
                converte_para_complemento2(numero); // Converte para complemento a 2
                break;
            case 4:
                printf("Digite um número real (float): ");
                scanf("%f", &numero_float);
                printf("Convertendo para float (32 bits):\n");
                mostra_bits_float(numero_float); // Exibe os bits do número float
                break;
            case 5:
                printf("Digite um número real (double): ");
                scanf("%lf", &numero_double);
                printf("Convertendo para double (64 bits):\n");
                mostra_bits_double(numero_double); // Exibe os bits do número double
                break;
            case 0:
                printf("Saindo...\n");
                break;
            default:
                printf("Opção inválida!\n");
        }
    } while(opcao != 0);

    return 0;
}
